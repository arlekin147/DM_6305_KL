#include <iostream>
#include "conio.h"
using namespace std;

typedef struct N { //Структура содержит данные о длинном натуральном числе
	int n; //Старший разряд числа
	int *A; //Массив цифр
}N;
void num_out(N Num){
	int i;
	for (i = Num.n; i >= 0; i--) cout << Num.A[i];
	//cout << endl;
}
N num_cpy(N Num){
	int i;
	N new_Num;
	new_Num.n = Num.n;
	new_Num.A = NULL;
	for (i = 0; i <= Num.n; i++){
		new_Num.A = (int*)realloc(new_Num.A, (i + 1)*sizeof(int));
		new_Num.A[i] = Num.A[i];
	}
	return new_Num;
}
int COM_NN_D(N Num1, N Num2){ //Модуль N1. Разработал Буракаев Данияр.Затраченное время : ~15 минут 
	int i;
	if (Num1.n > Num2.n) return 2; //Если в первом числе больше старший разряд , то оно больше
	else if (Num1.n == Num2.n){ // Если старшие разряды равны , то сравниваем цифры
		i = Num1.n; //Начиная со старшего разряда
		while (i != (-1)){ //Пока разряды не закончились
			if (Num1.A[i] > Num2.A[i]) { return 2; } //Если первая их различная цифра у первого больше , то больше первое 
			else if (Num2.A[i] > Num1.A[i]) { return 1; } //Если у второго , то второе
			else{ i--; }
		}
		return 0; // Если все цифры равны , то и числа равны
	}
	else return 1;//Если старший разряд больше во втором числе , то больше второе
}

int NZER_N_B(N Num){ //Модуль N2. Разработал Сапожников Евгений. Затраченное время : ~8 минут Проверено
	if (Num.A[Num.n] == 0) return 0; //Если цифра в старшем разряде равна нулю , то число равно нулю
	else return 1; //Иначе не ноль
}

N ADD_1N_N(N Num){//Модуль N3 Разработала Таиссия Смирнова.Затраченное время ~1,5 часа
	N new_Num;
	int time=0;
	int flag, i;
	new_Num.n = Num.n;
	new_Num.A = NULL;
	i = 0;
	flag = 0;
	new_Num.A = (int*)realloc(new_Num.A, (new_Num.n + 2)*sizeof(int));
	for (i = 0; i <= Num.n; i++) new_Num.A[i] = Num.A[i];
	new_Num.n++;
	new_Num.A[new_Num.n]=0;
	i = 0;
	flag = 0;
	i = 0;
	new_Num.A[i]++;
	while (flag==0){
		if (new_Num.A[i]== 10){
			new_Num.A[i] = 0;
			new_Num.A[i + 1]++;
		}
		else flag = 1;
		i++;
	}
	if (new_Num.A[new_Num.n] == 0){
		new_Num.n--;
		new_Num.A = (int*)realloc(new_Num.A, (new_Num.n + 1)*sizeof(int));
	}
	return new_Num;
}

N ADD_NN_N(N Num1, N Num2){ //Модуль N4 . Разработал Буракаев Данияр . Затраченное время ~45 минут
	N Num3 ,time;
	int i,max,min,flag;
	flag = COM_NN_D(Num1, Num2);
	if (flag == 1) {
		time = Num2;
		Num2 = Num1;
		Num1 = time;
	}
	Num3 = num_cpy(Num1);
	Num3.A = (int*)realloc(Num3.A, (Num3.n + 1)*sizeof(int));
	Num3.A[(Num3.n+1)] = 0;
	Num3.n++;
	i = 0;
	while (i != ((Num2.n)+1)){
		Num3.A[i] += Num2.A[i];
		if (Num3.A[i] / 10 != 0){
			Num3.A[i + 1]++;
			Num3.A[i] %= 10;
		}
		i++;
	}
	if (Num3.A[Num3.n] == 0) {
		Num3.A = (int*)realloc(Num3.A, (Num3.n)*sizeof(int));
		Num3.n--;
	}
	
	return Num3;
}

N SUB_NN_N(N Num1, N Num2){//Модуль N5. Разработал Евгений Сапожников.Затраченное время ~25 минут
	int flag, i, j;
	N new_Num;
	new_Num.n = Num1.n;
	new_Num.A = NULL;
	for (i = 0; i <= Num1.n; i++){
		new_Num.A = (int*)realloc(new_Num.A, new_Num.n*sizeof(int));
		new_Num.A[i] = Num1.A[i];
	}
	flag = COM_NN_D(new_Num, Num2);
	i = 0;
	if (flag == 1){
		new_Num.A = (int*)malloc(sizeof(int));
		new_Num.A[0] = 0;
		new_Num.n = 0;
		return new_Num;
	}
	else{
		i = 0;
		while (i <= Num2.n){
			//cout << 2 << endl;
			if (new_Num.A[i] < Num2.A[i]) {
				j = i;
			//	cout << "j=" << j << endl;
				do{
					new_Num.A[j] += 10;
					new_Num.A[j + 1]--;
					j++;
					//cout << 1 << endl;
				} while (new_Num.A[j] < 0);
				//cout << "j=" << j << endl;
				//new_Num.A[j] --;
				if (new_Num.A[new_Num.n] <= 0)
				{
					new_Num.n--;
				}
				//new_Num.A=(int*)realloc(new_Num.A,(new_Num.n+1)*sizeof(int));
			}
			new_Num.A[i] -= Num2.A[i];
			i++;
			}

			//new_Num.A[i + 1]--;
			//new_Num.A[i] += 10;
		}
	//getch();
	return new_Num;
}



N MUL_ND_N(N Num, int  digit){//Модуль N6 . Разработала Таисия Смирнова . Затраченное время ~1 час
	int i,time=0,flag=0;
	N new_Num;
	new_Num.n = Num.n;
	new_Num.A = NULL;
	for (i = 0; i <= Num.n; i++){
		new_Num.A = (int*)realloc(new_Num.A, (i + 1)*sizeof(int));
		new_Num.A[i] = Num.A[i];
	}
	i = 0;
	while (i<= new_Num.n){
		new_Num.A[i] = (new_Num.A[i] * digit) + time;
		time = 0;
		if (new_Num.A[i] >= 10){
			time = new_Num.A[i] / 10;
			new_Num.A[i] %= 10;
			if (i == new_Num.n) {
				new_Num.A = (int*)realloc(new_Num.A, (new_Num.n + 2)*sizeof(int));
			}
		}
		i++;
	}
	if (time){
		new_Num.A[i] = time;
		new_Num.n = Num.n + 1;
	}
	return new_Num;
}


N MUL_Nk_N(N Num, int deg){ //Модуль N7. Разработал Буракаев Данияр. Затраченное время ~10 минут
	N new_Num;
	int i;
	new_Num.n =Num.n+ deg;
	new_Num.A = (int*)malloc((new_Num.n + deg+1)*sizeof(int));
	i = 0;
	while (i != deg){
		new_Num.A[i] = 0;
		i++;
	}
	while (i <= new_Num.n){
		new_Num.A[i] = Num.A[i - deg];
		i++;
	}

	return new_Num;
}

N MUL_NN_N(N Num1, N Num2){//Модуль N8 . Разработал Евгений Гонштейн.Затраченное время ~5 минут
	int i=0,j;
	N Num3,p,p1,p2;
	Num3.A = (int*)malloc(sizeof(int));
	Num3.A[0] = 0;
	Num3.n = 0;
	while (i <= Num2.n){
		p2 = MUL_ND_N(Num1, Num2.A[i]);
		/*for (j = p2.n; j >= 0; j--) cout << p2.A[j];
		cout << endl;*/
		p1 = MUL_Nk_N(p2, i);
		/*for (j = p1.n; j >= 0; j--) cout << p1.A[j];
		cout << endl;*/
		Num3 = ADD_NN_N(Num3,p1);
		i++;
	}
	return Num3;
}

N SUB_NDN_N(N Num1, N Num2, int digit){//Модуль N9. Разработала Таисия Смирнова.Затраченное время ~1,5 часа
	int flag,i;
	N new_Num2,new_Num;
	new_Num2 = MUL_ND_N(Num2, digit);
	if (COM_NN_D(Num1, new_Num2) == 1) {
		new_Num.A = (int*)malloc(sizeof(int));
		new_Num.A[0] = 0;
		new_Num.n = 0;
	}
	else{
		new_Num = SUB_NN_N(Num1, new_Num2); 
	}
	return new_Num;
}

int DIV_NN_Dk(N Num1, N Num2, int k){//N10 Разработала Анна Тарасова. Затраченное время ~20 минут
	int j,i,result;
	N q, Num3;
	q.n = 0;
	q.A = (int*)malloc(sizeof(int));
	q.A[0] = 0;
	Num3.n = 0;
	Num3.A = (int*)malloc(sizeof(int));
	Num3.A[0] = 0;
	j = 0;
	while (Num1.n - j >= 0){
		q = MUL_Nk_N(q, 1);
		while (COM_NN_D(Num3, Num2) == 1){
			Num3 = MUL_Nk_N(Num3, 1);
			Num3.A[0] = Num1.A[Num1.n - j];
			j++;
		}
		if (Num3.A[Num3.n] == 0){
			Num3.n--;
		}
		
		while (COM_NN_D(Num3, Num2) != 1){
			Num3 = SUB_NN_N(Num3, Num2);
			q = ADD_1N_N(q);
		}
	}
	if (k < q.n){
		result = q.A[k];
	}
	else result = 0;
	return result;
}

N DIV_NN_N(N Num1, N Num2){ //Модуль N11 Разработала Вдовиченко Лера.Затраченное время ~40 минут
	N q;
	int i;
	if (COM_NN_D(Num1, Num2) != 1){
		q.n = Num1.n - Num2.n;
		q.A = (int*)malloc((q.n + 1)*sizeof(int));
		for (i = 0; i <= Num1.n - Num2.n; i++){
			q.A[i] = DIV_NN_Dk(Num1, Num2, i);
		}
		if (q.A[q.n] == 0){
			q.n--;
			q.A = (int*)realloc(q.A, (q.n + 1)*sizeof(int));
		}
	}
	else {
		q.n = 0;
		q.A = (int*)malloc(sizeof(int));
		q.A[0] = 0;
	}
	return q;
}

N MOD_NN_N(N Num1, N Num2){//Модуль N12 . Разработала Вдовиченко Лера.Затраченное время ~10 минут.
	N r;
	if (COM_NN_D(Num1, Num2) != 1){
		r.n = 0;
		r.A = (int*)malloc(sizeof(int));
		r.A[0] = 0;
		r = SUB_NN_N(Num1, MUL_NN_N(DIV_NN_N(Num1, Num2), Num2)); 
		while (r.A[r.n] == 0 && r.n != 0){
			r.n--;
			r.A = (int*)realloc(r.A, (r.n + 1)*sizeof(int));
		}
	}
	else r = num_cpy(Num1);
	return r;
}
N GCF_NN_N(N Num1, N Num2){ //Модуль N13 . Разработала Вдовиченко Лера. Затраченное время ~15 минут.
	N NOD,new_Num1,new_Num2;
	new_Num1 = num_cpy(Num1);
	new_Num2 = num_cpy(Num2);

	if (COM_NN_D(new_Num1, new_Num2) == 0) return  new_Num1;
	while (NZER_N_B(new_Num1) && NZER_N_B(new_Num2)){
		if (COM_NN_D(new_Num1, new_Num2) == 2){
			new_Num1 = MOD_NN_N(new_Num1, new_Num2);
		}
		else{
			new_Num2 = MOD_NN_N(new_Num2, new_Num1);
		}
	}
	if (NZER_N_B(new_Num1)){
		NOD = num_cpy(new_Num1);
	}
	else{
		NOD = num_cpy(new_Num2);
	}
	return NOD;
}

N LCM_NN_N(N Num1,N Num2){//N14 Разработал Побежимов Александр. Затраченное время ~5 минут.
	N NOK,NOD;
	NOD = GCF_NN_N(Num1, Num2);
	NOK = DIV_NN_N(MUL_NN_N(Num1, Num2), NOD);
	return NOK;
}
